import streamlit as st
import numpy as np
import cv2
from PIL import Image
import pytesseract
import re
from sympy import latex, sympify
import docx
import io
import tempfile
import pyperclip
import platform

# C·∫•u h√¨nh Streamlit
st.set_page_config(
    page_title="Math OCR & LaTeX Converter",
    page_icon="üìù",
    layout="wide"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main { 
        padding: 2rem; 
    }
    .result-box {
        background-color: #f0f2f6;
        border-radius: 10px;
        padding: 20px;
        margin: 10px 0;
    }
    .latex-output {
        background-color: white;
        padding: 15px;
        border-radius: 5px;
        font-family: monospace;
    }
</style>
""", unsafe_allow_html=True)

# H√†m x·ª≠ l√Ω ·∫£nh
def preprocess_image(image):
    # Chuy·ªÉn v·ªÅ grayscale
    gray = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2GRAY)
    
    # TƒÉng c∆∞·ªùng ƒë·ªô t∆∞∆°ng ph·∫£n
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
    enhanced = clahe.apply(gray)
    
    # Kh·ª≠ nhi·ªÖu
    denoised = cv2.fastNlMeansDenoising(enhanced)
    
    # Ng∆∞·ª°ng h√≥a
    _, binary = cv2.threshold(denoised, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    
    return binary

# H√†m t√°ch bi·ªÉu th·ª©c to√°n h·ªçc
def extract_math(text):
    math_patterns = [
        r'y\s*=\s*\w+[^.]',  # Ph∆∞∆°ng tr√¨nh
        r'\d+\s[+-/]\s\d+',  # Ph√©p t√≠nh c∆° b·∫£n
        r'\w+\s*=\s*[^.]*',  # Bi·ªÉu th·ª©c g√°n
        r'\w+\s*[+\-*/]\s*\w+',  # Bi·ªÉu th·ª©c ƒë∆°n gi·∫£n
    ]
    
    math_expressions = []
    for pattern in math_patterns:
        matches = re.finditer(pattern, text)
        for match in matches:
            math_expressions.append(match.group())
    
    return math_expressions

# H√†m chuy·ªÉn ƒë·ªïi sang LaTeX
def math_to_latex(expression):
    try:
        expression = expression.replace('=', ' = ')
        latex_expr = latex(sympify(expression, evaluate=False))
        return f"${latex_expr}$"
    except:
        return f"${expression}$"

# H√†m t·∫°o t√†i li·ªáu Word
def create_word_doc(original_text, latex_code):
    doc = docx.Document()
    doc.add_heading('K·∫øt qu·∫£ chuy·ªÉn ƒë·ªïi to√°n h·ªçc', 0)
    
    doc.add_heading('VƒÉn b·∫£n g·ªëc:', level=1)
    doc.add_paragraph(original_text)
    
    doc.add_heading('M√£ LaTeX:', level=1)
    doc.add_paragraph(latex_code)
    
    return doc

# H√†m ch·ª•p m√†n h√¨nh (h·ªó tr·ª£ ƒëa n·ªÅn t·∫£ng)
def take_screenshot():
    system = platform.system()
    
    if system == "Darwin":  # macOS
        import pyscreenshot as ImageGrab
        image = ImageGrab.grab()
    elif system == "Windows":
        from PIL import ImageGrab
        image = ImageGrab.grab()
    elif system == "Linux":
        import pyscreenshot as ImageGrab
        image = ImageGrab.grab()
    else:
        st.error("H·ªá ƒëi·ªÅu h√†nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£")
        return None
    
    return image

# H√†m ch√≠nh
def main():
    st.title("üìö Chuy·ªÉn ƒë·ªïi To√°n h·ªçc sang LaTeX")
    
    # C√°c tab ch·ª©c nƒÉng
    tab1, tab2, tab3 = st.tabs(["T·∫£i ·∫£nh", "Ch·ª•p m√†n h√¨nh", "H∆∞·ªõng d·∫´n"])
    
    with tab1:
        # Upload ·∫£nh
        uploaded_file = st.file_uploader("T·∫£i l√™n ·∫£nh ch·ª©a n·ªôi dung to√°n h·ªçc", 
                                         type=['png', 'jpg', 'jpeg'])
        
        if uploaded_file is not None:
            image = Image.open(uploaded_file)
            st.image(image, caption="·∫¢nh ƒë√£ t·∫£i l√™n", use_column_width=True)
            
            if st.button("X·ª≠ l√Ω ·∫£nh t·ª´ t·∫≠p tin"):
                process_image(image)
    
    with tab2:
        if st.button("Ch·ª•p m√†n h√¨nh"):
            screenshot = take_screenshot()
            if screenshot:
                st.image(screenshot, caption="·∫¢nh ch·ª•p m√†n h√¨nh", use_column_width=True)
                process_image(screenshot)
    
    with tab3:
        st.markdown("""
        ### H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        1. T·∫£i ·∫£nh ch·ª©a c√¥ng th·ª©c to√°n h·ªçc
        2. Nh·∫•n n√∫t "X·ª≠ l√Ω ·∫£nh"
        3. Xem k·∫øt qu·∫£ v√† t·∫£i v·ªÅ ƒë·ªãnh d·∫°ng DOCX
        
        ### L∆∞u √Ω
        - H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: PNG, JPG, JPEG
        - Ch·∫•t l∆∞·ª£ng ·∫£nh ·∫£nh h∆∞·ªüng ƒë·∫øn ƒë·ªô ch√≠nh x√°c
        """)

# H√†m x·ª≠ l√Ω ·∫£nh chung
def process_image(image):
    with st.spinner("ƒêang x·ª≠ l√Ω..."):
        # Ti·ªÅn x·ª≠ l√Ω ·∫£nh
        processed_img = preprocess_image(image)
        
        # OCR
        text = pytesseract.image_to_string(processed_img, lang='vie+eng')
        
        # T√°ch bi·ªÉu th·ª©c to√°n h·ªçc
        math_expressions = extract_math(text)
        
        # Chuy·ªÉn ƒë·ªïi sang LaTeX
        latex_results = [math_to_latex(expr) for expr in math_expressions]
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.subheader("K·∫øt qu·∫£ nh·∫≠n d·∫°ng")
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("VƒÉn b·∫£n g·ªëc:")
            st.code(text)
        
        with col2:
            st.markdown("M√£ LaTeX:")
            latex_text = "\n".join(latex_results)
            st.code(latex_text)
            
            # N√∫t copy LaTeX
            if st.button("üìã Copy LaTeX"):
                pyperclip.copy(latex_text)
                st.success("ƒê√£ copy m√£ LaTeX!")
        
        # T·∫°o file Word
        doc = create_word_doc(text, latex_text)
        
        # L∆∞u t·∫°m file Word
        with tempfile.NamedTemporaryFile(suffix='.docx', delete=False) as tmp:
            doc.save(tmp.name)
        
        # N√∫t t·∫£i xu·ªëng
        with open(tmp.name, 'rb') as f:
            st.download_button(
                label="üì• T·∫£i k·∫øt qu·∫£ (DOCX)",
                data=f.read(),
                file_name="math_conversion.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    main()
